from snakebids import bids, generate_inputs, get_wildcard_constraints

configfile: 'config/snakebids.yml'

# Global variables from the config file
bids_dir = config['bids_dir']
output_dir = config['output_dir']

inputs = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybidsdb_dir=config.get("pybidsdb_dir"),
    pybidsdb_reset=config.get("pybidsdb_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    validate=not config.get("plugins.validator.skip", False)
)

print(config)

rule all:
    input:
        inputs['t1w'].expand(
            bids(
                root='/home/bic/eyang/processed_data2/micapipe_v0.2.0',
                datatype='anat',
                space='nativepro',
                suffix='T1w.nii.gz',
                **inputs['t1w'].wildcards
            )
        ),


# Rule for structural processing

rule proc_structural:
    input:
        inputs['t1w'].expand()
    output:
        bids(
            root=f'{output_dir}/micapipe_v0.2.0',
            datatype='anat',
            space='nativepro',
            suffix='T1w.nii.gz',
            **inputs['t1w'].wildcards
        )
    params:
        T1wStr=config["parameters"]["proc_structural"].get("T1wStr", None),
        UNI=config["parameters"]["proc_structural"].get("UNI", None),
        MF=config["parameters"]["proc_structural"].get("MF", None),
        mf_str=f"-mf {MF}" if MF else "",
        t1w_str=f"-T1wStr {T1wStr}" if T1wStr else "",
        uni_str=f"-UNI {UNI}" if UNI else "",
    threads: config.get("threads", 4),
    shell:
        """
        micapipe -sub sub-{wildcards.subject} -out {output_dir} -bids {bids_dir} \
                -proc_structural {params.t1w_Str} {params.uni_str} {params.mf_str}\
             -ses {wildcards.session} -threads {threads}
        """


# Rule for cortical surface reconstruction
rule proc_surf:
    input:
        inputs['t1w'].expand(
            bids(
                root=f'{output_dir}/micapipe_v0.2.0',
                datatype='anat',
                space='nativepro',
                suffix='T1w.nii.gz',
                **inputs['t1w'].wildcards
            )
        ),
    output:
        bids(
            root=f'{output_dir}/micapipe_v0.2.0',
            datatype='surf',
            hemi=['L', 'R'],
            space='nativepro',
            surf=['fsaverage5', 'fsLR32k', 'fsLR5k', 'fsnative'],
            label=['midthickness', 'pial', 'white'],
            suffix='.surf.gii',
            **inputs['t1w'].wildcards
        )
    params:
        fs_licence=config["parameters"].get("fs_licence", None),
        surf_dir=config["parameters"]["proc_surface"].get("surf_dir", None),
        freesurfer=config["parameters"]["proc_surface"].get("freesurfer", None),
        T1wStr=config["parameters"]["proc_structural"].get("T1wSTr", None),
        t1=config["parameters"]["proc_surface"].get("T1", None),
        t1w_str=f"-T1wStr {T1wStr}" if T1wStr else "",
        freesurfer_str=f"-freesurfer {freesurfer}" if freesurfer else "",
        surf_dir_str=f"-surf_dir {surf_dir}" if surf_dir else "",
        t1_str=f"-T1 {t1}" if t1 else "",
    threads: config.get("threads", 4),
    shell:
        """
        micapipe -sub sub-{wildcards.subject} -out {output_dir} -bids {bids_dir} -proc_surf \
            -threads {threads} -fs_licence {params.fs_licence} {params.t1w_str} {params.freesurfer_str} \
            {params.surf_dir_str} {params.t1_str} -ses {wildcards.session}
        """

# Rule for post structural processing
rule post_structural:
    input:
        structural_output=inputs['t1w'].expand(
            bids(
                root=f'{output_dir}/micapipe_v0.2.0',
                datatype='anat',
                space='nativepro',
                suffix='T1w.nii.gz',
                **inputs['t1w'].wildcards
            )
        ),
        surf_output=inputs['t1w'].expand(
            bids(
                root=f'{output_dir}/micapipe_v0.2.0',
                datatype='surf',
                hemi=['L', 'R'],
                space='nativepro',
                surf=['fsaverage5', 'fsLR32k', 'fsLR5k', 'fsnative'],
                label=['midthickness', 'pial', 'white'],
                suffix='.surf.gii',
                **inputs['t1w'].wildcards
            )
        ),
    output:
        post_structural=bids(
                root=f'{output_dir}/micapipe_v0.2.0',
                datatype='anat',
                space='fsnative',
                suffix='T1w.nii.gz',
                **inputs['t1w'].wildcards
            )
    params:
        atlas=config["parameters"]["post_structural"].get("atlas", "default"),
        if type(atlas) == list:
            atlas = ",".join(atlas),
    threads: config.get("threads", 4),
    shell:
        """
        micapipe -sub sub-{wildcards.subject} -out {output_dir} -bids {bids_dir} -post_structural \
            -threads {threads} -atlas {params.atlas} -ses {wildcards.session}
        """

# Rule for geodesic distance
rule proc_geodesic_distance:
    input:
        structural_output=inputs['t1w'].expand(
            bids(
                root=f'{output_dir}/micapipe_v0.2.0',
                datatype='anat',
                space='nativepro',
                suffix='T1w.nii.gz',
                **inputs['t1w'].wildcards
            )
        ),
        surf_output=inputs['t1w'].expand(
            bids(
                root=f'{output_dir}/micapipe_v0.2.0',
                datatype='surf',
                hemi=['L', 'R'],
                space='nativepro',
                surf=['fsaverage5', 'fsLR32k', 'fsLR5k', 'fsnative'],
                label=['midthickness', 'pial', 'white'],
                suffix='.surf.gii',
                **inputs['t1w'].wildcards
            )
        ),
        post_structural_output=inputs['t1w'].expand(
            bids(
                root=f'{output_dir}/micapipe_v0.2.0',
                datatype='anat',
                space='fsnative',
                suffix='T1w.nii.gz',
                **inputs['t1w'].wildcards
            )
        ),
    output:
        geodesic_distance=bids(
            root=f'{output_dir}/micapipe_v0.2.0',
            datatype='dist',
            atlas='{parcellation}',
            suffix='GD.shape.gii',
            **inputs['t1w'].wildcards
        )
    threads: config.get("threads", 4),
    shell:
        """
        micapipe -sub sub-{wildcards.subject} -out {output_dir} -bids {bids_dir} -GD \
            -threads {threads} -ses {wildcards.session}
        """

# rule for diffusion processing
rule proc_dwi:
    input:
        # DWI processing requires structural output as dependency
        structural_output=lambda w: f"{output_dir}/sub-{w.subject}/ses-{w.session}/anat/processed_volumetric.nii.gz"
    output:
        processed_dwi=f"{output_dir}/sub-{{subject}}/ses-{{session}}/dwi/processed_dwi.mif"
    params:
        tmpDir="tmp",
        dwi_main=config["parameters"]["proc_dwi"].get("dwi_main", "DEFAULT"),
        dwi_rpe=config["parameters"]["proc_dwi"].get("dwi_rpe", "DEFAULT"),
        b0thr=config["parameters"]["proc_dwi"].get("b0thr", 61),
        sub=lambda w: w.subject,
        ses=lambda w: w.session
    threads: config.get("threads", 4),
    shell:
        """
        bash {script_dir}/02_proc-dwi.sh \
            {bids_dir} {params.sub} {output_dir} {params.ses} \
            -threads {threads} -tmpDir {params.tmpDir} \
            -dwi_main {params.dwi_main} -dwi_rpe {params.dwi_rpe} \
            -b0thr {params.b0thr}
        """

rule sc:
    input:
        dwi_output=lambda w: f"{output_dir}/sub-{w.subject}/ses-{w.session}/dwi/processed_dwi.mif",
        post_structural=lambda w: f"{output_dir}/sub-{w.subject}/ses-{w.session}/anat/post_structural.nii.gz"
    output:
        sc_output=f"{output_dir}/sub-{{subject}}/ses-{{session}}/connectome/sc.csv"
    params:
        tmpDir="tmp",
        sub=lambda w: w.subject,
        ses=lambda w: w.session
    threads: config.get("threads", 4),
    shell:
        """
        bash {script_dir}/03_SC.sh \
            {bids_dir} {params.sub} {output_dir} {params.ses} \
            -threads {threads} -tmpDir {params.tmpDir}
        """
