from snakebids import bids, generate_inputs, get_wildcard_constraints

configfile: 'config/snakebids.yml'

# Global variables from the config file
bids_dir = config['bids_dir']
output_dir = config['output_dir']

inputs = generate_inputs(
    bids_dir=config["bids_dir"],
    pybids_inputs=config["pybids_inputs"],
    pybidsdb_dir=config.get("pybidsdb_dir"),
    pybidsdb_reset=config.get("pybidsdb_reset"),
    derivatives=config.get("derivatives", None),
    participant_label=config.get("participant_label", None),
    exclude_participant_label=config.get("exclude_participant_label", None),
    validate=not config.get("plugins.validator.skip", False)
)

print(config)

rule all:
    input:
        inputs['t1w'].expand(
            bids(
                root='/home/bic/eyang/processed_data2/micapipe_v0.2.0',
                datatype='anat',
                space='nativepro',
                suffix='T1w.nii.gz',
                **inputs['t1w'].wildcards
            )
        ),


# Rule for structural processing

rule proc_structural:
    input:
        inputs['t1w'].expand()
    output:
        bids(
            root=f'{output_dir}/micapipe_v0.2.0',
            datatype='anat',
            space='nativepro',
            suffix='T1w.nii.gz',
            **inputs['t1w'].wildcards
        )
    params:
        tmpDir="tmp",
        T1wStr=config["parameters"]["proc_structural"].get("T1wStr", "T1w.nii"),
        UNI=config["parameters"]["proc_structural"].get("UNI", "FALSE"),
        MF=config["parameters"]["proc_structural"].get("MF", 45),
        fs_licence="$FREESURFER_HOME/license.txt",
    threads: config.get("threads", 4),
    shell:
        """
        micapipe -sub sub-{wildcards.subject} -out {output_dir} -bids {bids_dir} \
                -proc_structural -T1wStr {params.T1wStr} --mf {params.MF} \
            -fs_licence {params.fs_licence} -ses {wildcards.session}
        """


# Rule for cortical surface reconstruction
rule proc_surf:
    input:
        structural_output=f"{output_dir}/sub-{{subject}}/ses-{{session}}/anat/processed_volumetric.nii.gz",
    output:
        processed_surf=f"{output_dir}/sub-{{subject}}/ses-{{session}}/surf/processed_surf.gii",
    params:
        surf_dir="surf",
        freesurfer=config["parameters"]["proc_surf"].get("freesurfer", "FALSE"),
        fs_licence=config["parameters"]["proc_surf"].get("fs_licence", "path/to/fs_licence.txt"),
        sub=lambda wildcards: wildcards.subject,
        ses=lambda wildcards: wildcards.session,
    threads: config.get("threads", 4),
    shell:
        """
        bash {script_dir}/01_proc-surf.sh \
            {bids_dir} {params.sub} {output_dir} {params.ses} \
            --threads {threads} --surf_dir {params.surf_dir} --freesurfer {params.freesurfer} --fs_licence {params.fs_licence}
        """

# Rule for post structural processing
rule post_structural:
    input:
        structural_output=f"{output_dir}/sub-{{subject}}/ses-{{session}}/anat/processed_volumetric.nii.gz",
        surf_output=f"{output_dir}/sub-{{subject}}/ses-{{session}}/surf/processed_surf.gii",
    output:
        post_structural=f"{output_dir}/sub-{{subject}}/ses-{{session}}/anat/post_structural.nii.gz",
    params:
        atlas=config["parameters"]["post_structural"].get("atlas", "default"),
        freesurfer=config["parameters"]["post_structural"].get("freesurfer", "FALSE"),
        sub=lambda wildcards: wildcards.subject,
        ses=lambda wildcards: wildcards.session,
    threads: config.get("threads", 4),
    shell:
        """
        bash {script_dir}/02_post-structural.sh \
            {bids_dir} {params.sub} {output_dir} {params.ses} \
            --threads {threads} --atlas {params.atlas} --freesurfer {params.freesurfer}
        """

# Rule for geodesic distance
rule proc_geodesic_distance:
    input:
        post_structural_output=f"{output_dir}/sub-{{subject}}/ses-{{session}}/anat/post_structural.nii.gz",
    output:
        geodesic_distance=f"{output_dir}/sub-{{subject}}/ses-{{session}}/maps/geodesic_distance.nii.gz",
    params:
        sub=lambda wildcards: wildcards.subject,
        ses=lambda wildcards: wildcards.session,
    threads: config.get("threads", 4),
    shell:
        """
        bash {script_dir}/03_GD.sh \
            {bids_dir} {params.sub} {output_dir} {params.ses} \
            --threads {threads}
        """

# rule for diffusion processing
rule proc_dwi:
    input:
        # DWI processing requires structural output as dependency
        structural_output=lambda w: f"{output_dir}/sub-{w.subject}/ses-{w.session}/anat/processed_volumetric.nii.gz"
    output:
        processed_dwi=f"{output_dir}/sub-{{subject}}/ses-{{session}}/dwi/processed_dwi.mif"
    params:
        tmpDir="tmp",
        dwi_main=config["parameters"]["proc_dwi"].get("dwi_main", "DEFAULT"),
        dwi_rpe=config["parameters"]["proc_dwi"].get("dwi_rpe", "DEFAULT"),
        b0thr=config["parameters"]["proc_dwi"].get("b0thr", 61),
        sub=lambda w: w.subject,
        ses=lambda w: w.session
    threads: config.get("threads", 4),
    shell:
        """
        bash {script_dir}/02_proc-dwi.sh \
            {bids_dir} {params.sub} {output_dir} {params.ses} \
            --threads {threads} --tmpDir {params.tmpDir} \
            --dwi_main {params.dwi_main} --dwi_rpe {params.dwi_rpe} \
            --b0thr {params.b0thr}
        """

rule sc:
    input:
        dwi_output=lambda w: f"{output_dir}/sub-{w.subject}/ses-{w.session}/dwi/processed_dwi.mif",
        post_structural=lambda w: f"{output_dir}/sub-{w.subject}/ses-{w.session}/anat/post_structural.nii.gz"
    output:
        sc_output=f"{output_dir}/sub-{{subject}}/ses-{{session}}/connectome/sc.csv"
    params:
        tmpDir="tmp",
        sub=lambda w: w.subject,
        ses=lambda w: w.session
    threads: config.get("threads", 4),
    shell:
        """
        bash {script_dir}/03_SC.sh \
            {bids_dir} {params.sub} {output_dir} {params.ses} \
            --threads {threads} --tmpDir {params.tmpDir}
        """
